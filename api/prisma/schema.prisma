// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                 @id @default(autoincrement())
  idInAuthService   String              @unique
  fullName          String
  birthDate         DateTime
  phoneNumber       String
  avatarId          Int                 @unique
  avatar            Avatar              @relation(fields: [avatarId], references: [id])
  gatheringStarter  GatheringStarter[]
  gatheringAttendee GatheringAttendee[]
  role              Role                @relation(fields: [roleId], references: [id])
  roleId            Int
}

enum RoleName {
  USER
  ADMIN
}

model Role {
  id   Int      @id @default(autoincrement())
  name RoleName
  User User[]
}

// Matches DiceBear "Big Ears"
model Avatar {
  id   Int   @id @default(autoincrement())
  User User?

  cheek     String?
  ear       String
  eyes      String
  face      String
  frontHair String?
  hair      String?
  hairColor String
  mouth     String
  nose      String
  sideburn  String?
  skinColor String
}

model Gathering {
  id                      Int                 @id @default(autoincrement())
  title                   String
  tagline                 String
  description             String
  isActive                Boolean
  startDatetime           DateTime
  isStartDatetimeStrict   Boolean
  endDatetime             DateTime
  isEndDatetimeStrict     Boolean
  attendeeMinimum         Int
  isAttendeeMinimumStrict Boolean
  attendeeMaximum         Int
  isAttendeeMaximumStrict Boolean
  ageMinimum              Int
  isAgeMinimumStrict      Boolean
  ageMaximum              Int
  isAgeMaximumStrict      Boolean
  gatheringStarter        GatheringStarter[]
  gatheringAttendee       GatheringAttendee[]
  latitude                Float
  longitude               Float
}

model GatheringStarter {
  id          Int       @id @default(autoincrement())
  gatheringId Int
  gathering   Gathering @relation(fields: [gatheringId], references: [id])
  starterId   Int
  starter     User      @relation(fields: [starterId], references: [id])
}

model GatheringAttendee {
  id          Int       @id @default(autoincrement())
  gatheringId Int
  gathering   Gathering @relation(fields: [gatheringId], references: [id])
  attendeeId  Int
  attendee    User      @relation(fields: [attendeeId], references: [id])
}
